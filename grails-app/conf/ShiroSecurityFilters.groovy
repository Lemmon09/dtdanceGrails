/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class ShiroSecurityFilters {
    
     /**
     * Array of controller/action combinations which will be skipped from authentication
     * if the controller and action names match. The action value can also be '*' if it
     * encompasses all actions within the controller.
     */
    static nonAuthenticatedActions = [
            [controller: 'publicSite', action: 'index'],
            [controller: 'publicSite', action: 'revealContent'],
            [controller: 'publicSite', action: 'revealGallery']
    ]
    
    /**
     * These are the controller/action combinations which need to be authenticated against the user's role.
     * The map also includes the roles which the controller/action pair will match against.filters
     */
    static authenticatedActions = [
        [controller: 'publicSite', action: 'revealContentProtected', roles: ['ROLE_ADMIN', 'ROLE_USER']],
        [controller: 'publicSite', action: 'adminLogin', roles: ['ROLE_ADMIN']]
    ] 
     
     
    def filters = {
         all(controller: '*', action: '*') {
            before = {
                // Determine if the controller/action belongs is not to be authenticated
                def needsAuth = !nonAuthenticatedActions.find {
                    (it.controller == controllerName) &&
                            ((it.action == '*') || (it.action == actionName))
                }
                if (needsAuth) {
                    // Get the map within the authenticated actions which pertain to the current
                    // controller and view.
                    def authRoles = authenticatedActions.find {
                        (it.controller == controllerName) &&
                                ((it.action == '*') || (it.action == actionName))
                    }

                    if (authRoles) {
                        // Perform the access control for each of the roles provided in the authRoles
                        accessControl {
                            authRoles.roles.each { roleName ->
                                role(roleName)
                            }
                        }
                    }else { // Skip authentication if the authRoles was not found
                        println "Role isn't found"
                        println "controller: ${controllerName} and action: ${actionName}"
                        return true
                    }
                }else {// Skip authentication if no auth is needed
                    println "No authentication needed"
                    return true
                }
            }
        }

        /*
        all(uri: "/**") {
            before = {
                // Ignore direct views (e.g. the default main index page).
                if (!controllerName) return true

                // Access control by convention.
                accessControl()
            }
        }
        */
    }
}
